// Generated by CoffeeScript 1.6.3
(function() {
  var check, command, dlog, eco, fs, glob, path, print, proc, util;

  fs = require('fs');

  path = require('path');

  proc = require('child_process');

  print = require('util').print;

  dlog = require('debug')('perc:check');

  eco = require('eco');

  glob = require('glob');

  util = require('../util');

  module.exports = command = {
    help: "Run sanity tests on monolithic app.js file",
    init: function(command, config) {
      return command.usage("\n\n  " + this.help);
    },
    run: function(command, config) {
      var build, _i, _len, _ref, _results;
      _ref = util.builds(config);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        build = _ref[_i];
        _results.push(check(build, config, command));
      }
      return _results;
    }
  };

  check = function(build, config, command) {
    var app_js_path, child, ctx, html, mod, mpj, opts, template, test_path, _ref, _ref1;
    test_path = path.resolve(path.join(config.check.dir, config.check.test));
    app_js_path = path.resolve(build.output);
    template = __dirname + "/../../templates/sanity-test.html.eco";
    template = fs.readFileSync((_ref = config.check.template) != null ? _ref : template, "utf-8");
    ctx = {
      app_js: path.relative(path.resolve(config.check.dir), app_js_path),
      cases: (function() {
        var _i, _len, _ref1, _results;
        _ref1 = util.sources(build);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          mod = _ref1[_i];
          _results.push("/" + build.sources + "/" + mod);
        }
        return _results;
      })(),
      more_tests: config.check.moreTests
    };
    dlog('context', ctx);
    util.mkdirp(config.check.dir);
    html = eco.render(template, ctx);
    fs.writeFileSync(test_path, html);
    mpj = (_ref1 = config.check.runner) != null ? _ref1 : 'mocha-phantomjs';
    opts = [test_path];
    if (config.check.runnerOpts) {
      opts.push(config.check.runnerOpts);
    }
    child = proc.spawn(mpj, opts);
    child.stdout.on('data', function(data) {
      return print(data.toString());
    });
    child.stderr.on('data', function(data) {
      return print(data.toString());
    });
    return child.on('exit', function(code) {
      if (code === 8 && mpj === 'mocha-phantomjs') {
        print("mocha-phantomjs returned an error. This probably means you don't have phantomjs installed. (run `npm install -g phantomjs`)\n");
      }
      if (code !== 0) {
        return process.exit(code);
      }
    });
  };

}).call(this);
