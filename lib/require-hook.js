// Generated by CoffeeScript 1.6.3
(function() {
  var coffee, formatSourcePosition, fs, mapped, patchStackTrace, patched, prettyErrorMessage;

  fs = require('fs');

  coffee = require('coffee-script');

  prettyErrorMessage = require('coffee-script/lib/coffee-script/helpers').prettyErrorMessage;

  if (require.extensions) {
    require.extensions['.coffee'] = function(module, filename) {
      var answer, err, main, message, options, raw, stripped, useColors;
      main = require.main;
      raw = fs.readFileSync(filename, 'utf8');
      stripped = raw.charCodeAt(0) === 0xFEFF ? raw.substring(1) : raw;
      options = {
        filename: filename,
        sourceMap: true
      };
      try {
        answer = coffee.compile(stripped, options);
      } catch (_error) {
        err = _error;
        useColors = process.stdout.isTTY && !process.env.NODE_DISABLE_COLORS;
        message = prettyErrorMessage(err, filename, stripped, useColors);
        process.stderr.write(message);
        process.stderr.write('\n');
        process.exit(1);
      }
      patchStackTrace();
      mapped(filename, answer.sourceMap);
      return module._compile(answer.js, filename);
    };
  }

  patched = false;

  patchStackTrace = function() {
    var mainModule;
    if (patched) {
      return;
    }
    patched = true;
    mainModule = require.main;
    mainModule._sourceMaps || (mainModule._sourceMaps = {});
    return Error.prepareStackTrace = function(err, stack) {
      var frame, frames, getSourceMapping, sourceFiles, _ref;
      sourceFiles = {};
      getSourceMapping = function(filename, line, column) {
        var answer, sourceMap;
        sourceMap = mainModule._sourceMaps[filename];
        if (sourceMap) {
          answer = sourceMap.sourceLocation([line - 1, column - 1]);
        }
        if (answer) {
          return [answer[0] + 1, answer[1] + 1];
        } else {
          return null;
        }
      };
      frames = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = stack.length; _i < _len; _i++) {
          frame = stack[_i];
          if (frame.getFunction() === exports.run) {
            break;
          }
          _results.push("  at " + (formatSourcePosition(frame, getSourceMapping)));
        }
        return _results;
      })();
      return "" + err.name + ": " + ((_ref = err.message) != null ? _ref : '') + "\n" + (frames.join('\n')) + "\n";
    };
  };

  formatSourcePosition = function(frame, getSourceMapping) {
    var as, column, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, methodName, source, tp, typeName;
    fileName = void 0;
    fileLocation = '';
    if (frame.isNative()) {
      fileLocation = "native";
    } else {
      if (frame.isEval()) {
        fileName = frame.getScriptNameOrSourceURL();
        if (!fileName) {
          fileLocation = "" + (frame.getEvalOrigin()) + ", ";
        }
      } else {
        fileName = frame.getFileName();
      }
      fileName || (fileName = "<anonymous>");
      line = frame.getLineNumber();
      column = frame.getColumnNumber();
      source = getSourceMapping(fileName, line, column);
      fileLocation = source ? "" + fileName + ":" + source[0] + ":" + source[1] + ", <js>:" + line + ":" + column : "" + fileName + ":" + line + ":" + column;
    }
    functionName = frame.getFunctionName();
    isConstructor = frame.isConstructor();
    isMethodCall = !(frame.isToplevel() || isConstructor);
    if (isMethodCall) {
      methodName = frame.getMethodName();
      typeName = frame.getTypeName();
      if (functionName) {
        tp = as = '';
        if (typeName && functionName.indexOf(typeName)) {
          tp = "" + typeName + ".";
        }
        if (methodName && functionName.indexOf("." + methodName) !== functionName.length - methodName.length - 1) {
          as = " [as " + methodName + "]";
        }
        return "" + tp + functionName + as + " (" + fileLocation + ")";
      } else {
        return "" + typeName + "." + (methodName || '<anonymous>') + " (" + fileLocation + ")";
      }
    } else if (isConstructor) {
      return "new " + (functionName || '<anonymous>') + " (" + fileLocation + ")";
    } else if (functionName) {
      return "" + functionName + " (" + fileLocation + ")";
    } else {
      return fileLocation;
    }
  };

  mapped = function(filename, sourceMap) {
    var _base;
    (_base = require.main)._sourceMaps || (_base._sourceMaps = {});
    return require.main._sourceMaps[filename] = sourceMap;
  };

}).call(this);
