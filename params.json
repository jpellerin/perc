{"name":"Perc","tagline":"Perc is a coffeescript application build and test helper","body":"perc\r\n====\r\n\r\n`perc` is a coffeescript application development tool. Its goal is to\r\nmake developing large, modular browser applications in coffeescript as\r\neasy and painless as possible. It makes several assumptions and has\r\nseveral opinions:\r\n\r\n* application code and tests are written in coffeescript\r\n* application code is organized into commonjs modules\r\n* target build is a single, monolithic javascript file\r\n  that includes all application modules and all modules\r\n  they `require`\r\n* [mocha](http://visionmedia.github.com/mocha/) is used for unit\r\n  tests, which are run under nodejs, optionally using\r\n  [jsdom](https://github.com/tmpvar/jsdom)\r\n* build sanity check also uses mocha, but runs under\r\n  [phantomjs](http://phantomjs.org/)\r\n\r\n\r\nGet started\r\n===========\r\n\r\nInstall\r\n-------\r\n\r\n```\r\nnpm install -g git://github.com/jpellerin/perc\r\n```\r\n\r\nCopy project skeleton\r\n---------------------\r\n\r\nThe command `perc init` will copy a project skeleton -- either the\r\ndefault, or any git repo -- into the working directory or a directory\r\nyou specify. It will only write files that don't already exist.\r\n\r\nSo, run `perc init` and then open up and customize the `package.json`\r\nfile it generated.\r\n\r\nOnce you've at least set a name and valid version (say, '1.0.0') in\r\n`package.json`, run `npm install` to install common development\r\ndependencies. Then you can run `perc` commands, either via the `perc`\r\nscript, or the `Makefile` that the skeleton generated (if you used the\r\ndefault).\r\n\r\nHere are some next steps:\r\n\r\n* Find the example module in `lib` and a test module for it in\r\n  `spec`.\r\n\r\n* Run `perc test` (or `make test`) to run the tests.\r\n\r\n* Run `perc build` or `make build` to build the output file\r\n  (`static/app.js` unless you've customized it in `config.coffee`).\r\n\r\n* Run `perc check` or `make check` to run sanity tests for the\r\n  output file. Note that you need `phantomjs` installed to\r\n  run the sanity tests.\r\n\r\n\r\nConfiguration\r\n==============\r\n\r\n> **NOTE** This is a change in version 0.2. In version 0.1,\r\n> configuration was kept in a separate config file.\r\n\r\n`perc` gets its configuration from the `perc` section in your\r\nproject's `package.json`. The default configuration values\r\nfrom the skeleton are:\r\n\r\n```json\r\n{\r\n    \"perc\": {\r\n        \"build\": {\r\n            \"sources\": \"lib\",\r\n            \"sourcePattern\": \"**/*.coffee\",\r\n            \"output\": \"static/app.js\"\r\n        },\r\n        \"check\": {\r\n            \"dir\": \"sanity\",\r\n            \"test\": \"test.html\"\r\n             \"//moreTests\": [\"test.js\"]\r\n        },\r\n        \"test\": {\r\n            \"cases\": \"spec/**/*.coffee\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis means:\r\n\r\n* Application code is in `lib/` and its subdirectories\r\n* Unit tests are in `spec/`\r\n* The output file for builds is `sanity/app.js`\r\n* The automatically generated sanity test html file is `sanity/test.html`\r\n* The sanity test will include only the generated tests, no custom\r\n  tests -- `moreTests` is commented out (sort of... as well as you can \r\n  comment out a json key).\r\n\r\n\r\nWorkflow\r\n========\r\n\r\n`perc` encourages a TDDish workflow in which unit tests are written, if not\r\nfirst, then often, and run frequently.\r\n\r\n\r\nWrite tests\r\n-----------\r\n\r\nWrite tests using mocha's BDD style, give them the exension\r\n`.spec.coffee`, and put them into the `spec/` directory. Run them with\r\n`perc test` or `make test`.\r\n\r\nTest coverage is available by adding the `-C` flag to `perc test` (or\r\ncall `make cover`). Coverage is output to `coverage.html`. It applies\r\nto the coffescript sources, not the generated javascript.\r\n\r\n\r\nWrite application modules\r\n-------------------------\r\n\r\nWrite application modules in coffeescript and put them under\r\n`lib/`. You can use nodejs modules supported by\r\n[browserify](http://browserify.org/) -- `npm install --save` them to\r\nensure your `package.json` stays up to date.\r\n\r\n\"Includes\"\r\n----------\r\n\r\nIf you want to use other, non-modular javascript files, put them in a\r\ndifferent directory, either under `lib/` or elsewhere. Then, `require`\r\nthem using a relative path as if they were commonjs modules. As long\r\nas they operate on `window` or have a valid commonjs wrapper, they\r\nshould work fine. The ones without a wrapper, of course, won't export\r\nanything, so whatever you want from them you'll have to pull out of\r\n`global.window`. For instance, here's now the sample project uses\r\njquery, which it has placed under `lib/includes/`:\r\n\r\n```coffeescript\r\nrequire('../includes/jquery')\r\n\r\nmain = () ->\r\n  $(document).ready () ->\r\n    load()\r\n```\r\n\r\nIn some cases you may need to update an include's commonjs wrapper, if\r\nit has dependencies and lists them as global.\r\n\r\n\r\nBuild the application\r\n---------------------\r\n\r\n`perc build` will compile all of your coffeescript sources into\r\njavascript and combine them into one monolithic module, which will be\r\nsaved to the path set by `config.build.output` -- `static/app.js` by\r\ndefault. The real work is done by\r\n[browserify](http://browserify.org/), so `perc` supports all of the\r\nnode modules that browserify does. You can also build a minimized\r\nversion.\r\n\r\nThe build application puts only the `require` function into the global\r\nnamespace. You use that to load application code. Here's how the\r\nsample project does it:\r\n\r\n```html\r\n<script src=\"/static/app.js\"></script>\r\n<script>\r\n  require('./lib/main').main()\r\n</script>\r\n```\r\n\r\nCheck the build\r\n---------------\r\n\r\n`perc check` will generate a sanity test file that checks that the\r\nbuilt application can load and that each of your application modules\r\ncan be `required`. If you want to test more than that, you can add\r\ntest modules to the sanity directory, and put them in your config\r\nfile's `config.check.moreTests` list.\r\n\r\nThe test file is set up to load\r\n[mocha](http://visionmedia.github.com/mocha/),\r\n[chai](http://chaijs.com) for use in writing additional tests. Note\r\nthat these tests will *not* be compiled from coffeescript\r\nautomatically. If you want to write sanity tests in coffeescript, you\r\nmust set up a build process for them.\r\n\r\nYou can also load the sanity test file in any browser.\r\n\r\nAutomate it\r\n-----------\r\n\r\n`perc watch` will watch your `lib/` and `spec/` directories and run\r\n`perc test` (and optionally `perc build` and `perc check`) whenever it\r\ndetects a changed file.\r\n\r\nUsage\r\n=====\r\n\r\n```\r\nUsage: perc [options] command <command arguments...> <command options...>\r\n\r\nFor help on individual commands, enter perc command --help\r\n\r\nCommands:\r\n\r\n  help                   Print usage information\r\n  build [options]        Build monolithic app.js in public directory\r\n  check [options]        Run sanity tests on monolithic app.js file\r\n  init [options]         Initialize a project from a skeleton\r\n  test [options]         Run unit tests\r\n  watch [options]        Watch for changes and test/build when they happen\r\n  *                      Custom commmand modules are supported\r\n\r\nOptions:\r\n\r\n  -h, --help               output usage information\r\n  -V, --version            output the version number\r\n  -c, --config [FILE]      Config file\r\n  -s, --section [SECTION]  perc config key in config file\r\n  -v, --verbose            Be more verbose\r\n```\r\n\r\nbuild\r\n-----\r\n\r\n```\r\nUsage: build [options]\r\n\r\nBuild monolithic app.js in public directory\r\n\r\nOptions:\r\n\r\n  -h, --help      output usage information\r\n  -o, --optimize  Uglify/minify app.js\r\n```\r\n\r\ncheck\r\n-----\r\n\r\n> **NOTE**: mocha-phantomjs opts not working yet\r\n\r\n```\r\nUsage: check [options]\r\n\r\nRun sanity tests on monolithic app.js file\r\n\r\nOptions:\r\n\r\n  -h, --help                           output usage information\r\n  -M, --mocha-phatomjs-opts [OPTIONS]  Set options for mocha-phantomjs\r\n\r\n```\r\n\r\ninit\r\n----\r\n\r\n> **NOTE** skeletons from urls/git repos not working yet\r\n\r\n```\r\nUsage: init <path> [options]\r\n\r\nInitialize a project from a skeleton\r\n\r\nOptions:\r\n\r\n  -h, --help                     output usage information\r\n  -S, --skeleton [SKELETON]      Skeleton path or url\r\n  --set [NAME:VALUE,NAME:VALUE]  Set project package config variable\r\n```\r\n\r\ntest\r\n----\r\n\r\n```\r\nUsage: test <modules> [options]\r\n\r\nRun unit tests\r\n\r\nOptions:\r\n\r\n  -h, --help                    output usage information\r\n  -S, --types [TYPES]           Set types of test to load\r\n  -C, --cover                   Output coverage report\r\n  -G, --grep [PATTERN]          Only run tests matching pattern\r\n  -R, --reporter [REPORTER]     Set the mocha reporter\r\n  -U, --ui [MOCHA_UI]           Set mocha ui (default: bdd)\r\n  -T, --timeout [TEST_TIMEOUT]  Set test timeout\r\n  --no-initdom                  Do not set up jsdom \"window\" before tests\r\n  --no-ignoreleaks              Do not ignore leaks of globals\r\n\r\n```\r\n\r\nwatch\r\n-----\r\n\r\nWatch for changes to lib or test files, run tests and/or build and check\r\nwhen they happen.\r\n\r\n```\r\nUsage: watch [options]\r\n\r\nOptions:\r\n\r\n  -h, --help      output usage information\r\n  -T, --no-test   Do not run tests when project or test files change\r\n  -B, --no-build  Do not build when project files change\r\n  -C, --no-check  Do not run check after building\r\n```\r\n\r\nMore Things!\r\n============\r\n\r\nSample application\r\n------------------\r\n\r\nThe sample application in `sample-project/` is a simple Flask app that\r\ndemonstrates how to integrate things like jquery, knockoutjs and\r\nbootstrap, and test ajax calls and generally be cool.\r\n\r\nCustom commands\r\n---------------\r\n\r\nAny module that exports a function can be a `perc` command. In theory,\r\nat least. Custom commands may be local modules, local modules prefixed\r\nwith `perc-` or packages installed into `node_modules`. They should\r\ngenerally follow the form:\r\n\r\n```coffeescript\r\nmodule.exports = (program, config, args...) ->\r\n  # do something useful\r\n  # exit with a non-zero exit code if something goes wrong\r\n\r\n```\r\n\r\nEmacs support\r\n-------------\r\n\r\nIn the `extra` directory you'll find an elisp module (`perc.el`) and a\r\nusage suggestion (`dot.emacs`). Put the module into `~/.emacs.d` and\r\nthe contents of `dot.emacs` into `~/.emacs` (or `~/.emacs.d/init.el`)\r\n-- and adjust the perc command variable if needed -- and you'll be\r\nable to run individual test modules from within emacs with `C-cM`, and\r\nrun the test module associated with an application module (either by\r\nname or by setting the `spec` file variable) with `C-cs`.\r\n\r\nSimilar projects\r\n================\r\n\r\n[brunch](http://brunch.io) and [yeoman]() are good alternatives to `perc`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}